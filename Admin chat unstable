-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Local Player
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Variables
local noclipEnabled = false
local espEnabled = false

-- Notify Function
local function notify(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = duration or 3;
    })
end

-- Script Loaded Notification
notify("Script Loaded", "Type ;cmds for available commands.", 5)

-- Set Walk Speed
local function setWalkSpeed(speed)
    local newSpeed = tonumber(speed)
    if newSpeed and newSpeed > 0 then
        humanoid.WalkSpeed = newSpeed
        notify("Speed Changed", "Walk speed set to " .. newSpeed, 3)
    else
        notify("Error", "Invalid speed. Example: ;ws 30", 3)
    end
end

-- Set Jump Power
local function setJumpPower(power)
    local newPower = tonumber(power)
    if newPower and newPower > 0 then
        humanoid.JumpPower = newPower
        notify("Jump Power Changed", "Jump power set to " .. newPower, 3)
    else
        notify("Error", "Invalid jump power. Example: ;jp 50", 3)
    end
end

-- Toggle Noclip
local function toggleNoclip()
    noclipEnabled = not noclipEnabled

    if noclipEnabled then
        RunService.Stepped:Connect(function()
            if noclipEnabled and character and humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end
        end)
        notify("Noclip Enabled", "You can now walk through walls.", 3)
    else
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
        notify("Noclip Disabled", "Noclip mode is now off.", 3)
    end
end

-- Server Hop
local function serverHop()
    local serversUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
    local function fetchServers(cursor)
        local url = serversUrl .. (cursor and "&cursor=" .. cursor or "")
        local response = HttpService:JSONDecode(game:HttpGet(url))
        return response
    end

    local server, cursor
    repeat
        local servers = fetchServers(cursor)
        for _, srv in ipairs(servers.data) do
            if srv.playing < srv.maxPlayers and srv.id ~= game.JobId then
                server = srv
                break
            end
        end
        cursor = servers.nextPageCursor
    until server or not cursor

    if server then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, player)
    else
        notify("Server Hop", "No suitable servers found.", 3)
    end
end

-- Join Small Server
local function joinSmallServer()
    local serversUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
    local function fetchServers(cursor)
        local url = serversUrl .. (cursor and "&cursor=" .. cursor or "")
        local response = HttpService:JSONDecode(game:HttpGet(url))
        return response
    end

    local smallestServer, cursor
    repeat
        local servers = fetchServers(cursor)
        for _, srv in ipairs(servers.data) do
            if srv.playing > 0 and srv.id ~= game.JobId then
                smallestServer = srv
                break
            end
        end
        cursor = servers.nextPageCursor
    until smallestServer or not cursor

    if smallestServer then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, smallestServer.id, player)
    else
        notify("Small Server", "No suitable small server found.", 3)
    end
end

-- Show Game ID
local function showGameInfo()
    notify("Game Info", "Game ID: " .. tostring(game.PlaceId), 5)
end

-- Get Player ID
local function getPlayerID(username)
    local targetPlayer = Players:FindFirstChild(username)
    if targetPlayer then
        notify("Player ID", "UserID: " .. targetPlayer.UserId, 5)
    else
        notify("Error", "Player not found. Example: ;pi username", 3)
    end
end

-- Teleport to Game
local function teleportToGame(playerID, gameID)
    if playerID and gameID then
        TeleportService:TeleportToPlaceInstance(tonumber(gameID), playerID, player)
        notify("Game Teleporter", "Teleporting to game...", 3)
    else
        notify("Error", "Usage: ;gt playerID gameID", 3)
    end
end

local function flyV3()
-- Services
local player = game.Players.LocalPlayer
local userInput = game:GetService("UserInputService")
local runService = game:GetService("RunService")

-- Variables
local flyGui = Instance.new("ScreenGui")
local flyFrame = Instance.new("Frame")
local layout = Instance.new("UIListLayout")
local ascendButton = Instance.new("TextButton")
local descendButton = Instance.new("TextButton")
local toggleFlyButton = Instance.new("TextButton")
local speedLabel = Instance.new("TextLabel")
local increaseSpeedButton = Instance.new("TextButton")
local decreaseSpeedButton = Instance.new("TextButton")
local closeGuiButton = Instance.new("TextButton")
local destroyGuiButton = Instance.new("TextButton")
local minimizeButton = Instance.new("TextButton")

-- Main GUI
flyGui.Name = "FlyGui"
flyGui.Parent = player:WaitForChild("PlayerGui")
flyGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
flyGui.ResetOnSpawn = false

-- Frame
flyFrame.Name = "FlyFrame"
flyFrame.Parent = flyGui
flyFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
flyFrame.BackgroundTransparency = 0.3
flyFrame.BorderSizePixel = 0
flyFrame.Position = UDim2.new(0.1, 0, 0.3, 0)
flyFrame.Size = UDim2.new(0, 250, 0, 300)
flyFrame.Active = true

-- Layout
layout.Parent = flyFrame
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Padding = UDim.new(0, 15)

-- Helper Function to Create Buttons
local function createButton(name, parent, text, color)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Parent = parent
    button.Size = UDim2.new(0, 200, 0, 40)
    button.BackgroundColor3 = color
    button.Font = Enum.Font.SourceSansBold
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 16
    return button
end

-- Buttons
ascendButton = createButton("AscendButton", flyFrame, "Fly Up", Color3.fromRGB(50, 150, 250))
descendButton = createButton("DescendButton", flyFrame, "Fly Down", Color3.fromRGB(50, 150, 250))
toggleFlyButton = createButton("ToggleFlyButton", flyFrame, "Toggle Fly", Color3.fromRGB(50, 200, 50))
increaseSpeedButton = createButton("IncreaseSpeedButton", flyFrame, "Increase Speed", Color3.fromRGB(150, 50, 250))
decreaseSpeedButton = createButton("DecreaseSpeedButton", flyFrame, "Decrease Speed", Color3.fromRGB(150, 50, 250))
closeGuiButton = createButton("CloseGuiButton", flyFrame, "Close GUI", Color3.fromRGB(250, 50, 50))
destroyGuiButton = createButton("DestroyGuiButton", flyFrame, "Destroy GUI", Color3.fromRGB(200, 0, 0))
destroyGuiButton.Visible = false -- Initially Hidden
minimizeButton = createButton("MinimizeButton", flyFrame, "Minimize GUI", Color3.fromRGB(100, 100, 100))

-- Speed Label
speedLabel.Name = "SpeedLabel"
speedLabel.Parent = flyFrame
speedLabel.Size = UDim2.new(0, 200, 0, 30)
speedLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
speedLabel.Text = "Fly Speed: 50"
speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
speedLabel.Font = Enum.Font.SourceSansBold
speedLabel.TextSize = 16
-- Fly Variables
local flySpeed = 50
local speeds = 1
local isFlying = false
local tpwalking = false
local nowe = false
local flyConnection

-- Start Flying
local function startFlying()
    if isFlying then return end
    isFlying = true

    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    -- Create Fly System
    tpwalking = true
    flyConnection = runService.Heartbeat:Connect(function()
        if tpwalking and rootPart then
            rootPart.CFrame = rootPart.CFrame + rootPart.CFrame.LookVector * flySpeed / 100
        end
    end)
end

-- Stop Flying
local function stopFlying()
    isFlying = false
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
end

-- Toggle Fly
toggleFlyButton.MouseButton1Click:Connect(function()
    if isFlying then
        stopFlying()
        toggleFlyButton.Text = "Toggle Fly"
    else
        startFlying()
        toggleFlyButton.Text = "Stop Flying"
    end
end)

-- Speed Adjustment
increaseSpeedButton.MouseButton1Click:Connect(function()
    flySpeed += 10
    speedLabel.Text = "Fly Speed: " .. flySpeed
end)

decreaseSpeedButton.MouseButton1Click:Connect(function()
    flySpeed = math.max(10, flySpeed - 10)
    speedLabel.Text = "Fly Speed: " .. flySpeed
end)

-- Ascend and Descend
ascendButton.MouseButton1Click:Connect(function()
    if isFlying then
        local character = player.Character
        if character then
            character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
        end
    end
end)

descendButton.MouseButton1Click:Connect(function()
    if isFlying then
        local character = player.Character
        if character then
            character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, -5, 0)
        end
    end
end)

-- GUI Visibility
closeGuiButton.MouseButton1Click:Connect(function()
    flyFrame.Visible = false
    destroyGuiButton.Visible = true
end)

destroyGuiButton.MouseButton1Click:Connect(function()
    flyGui:Destroy()
end)

minimizeButton.MouseButton1Click:Connect(function()
    flyFrame.Visible = not flyFrame.Visible
    minimizeButton.Text = flyFrame.Visible and "Minimize GUI" or "Maximize GUI"
end)
           end

-- Chat Command Handler
player.Chatted:Connect(function(message)
    if not message:sub(1, 1) == ";" then return end -- Only process commands starting with ";"
    local args = string.split(message, " ")
    local command = args[1]:lower()

    if command == ";fly" or command == ";fv3" then
        flyV3()

    elseif command == ";noclip" then
        toggleNoclip()

    elseif command == ";ws" or command == ";speed" or command == ";walkspeed" then
        setWalkSpeed(args[2])

    elseif command == ";jp" or command == ";jumppower" then
        setJumpPower(args[2])

    elseif command == ";rejoin" or command == ";rj" then
        TeleportService:Teleport(game.PlaceId)
        notify("Rejoining", "Teleporting to the current game...", 3)

    elseif command == ";serverhop" or command == ";sh" then
        serverHop()

    elseif command == ";smallserver" or command == ";ss" then
        joinSmallServer()

    elseif command == ";gi" or command == ";gameid" then
        showGameInfo()

    elseif command == ";pi" or command == ";playerid" then
        if args[2] then
            getPlayerID(args[2])
        else
            notify("Error", "Please provide a username. Example: ;pi username", 3)
        end

    elseif command == ";gt" or command == ";gameteleporter" then
        teleportToGame(args[2], args[3])

    else
        notify("Unknown Command", "Use ;cmds for a list of available commands.", 3)
    end
end)

-- List Commands
local function listCommands()
    local commands = [[
Available Commands:
;fly, ;fv3 - Placeholder for fly script
;noclip - Toggle noclip mode

;ws, ;speed, ;walkspeed [speed] - Set walk speed
;jp, ;jumppower [power] - Set jump power

;rejoin, ;rj - Rejoin the current game
;serverhop, ;sh - Switch to a new server
;smallserver, ;ss - Join a smaller server

;gi, ;gameid - Display the current game's ID
;pi, ;playerid [username] - Get the UserID of a player
;gt, ;gameteleporter [playerID] [gameID] - Teleport to a specific game

Type the commands in chat starting with ";".
    ]]
    notify("Commands List", "Check the output for full command details.", 5)
    print(commands)
end
