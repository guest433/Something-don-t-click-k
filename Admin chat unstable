-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Local Player
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Variables
local noclipEnabled = false
local espEnabled = false

-- Notify Function
local function notify(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = duration or 3;
    })
end

-- Script Loaded Notification
notify("Script Loaded", "Type ;cmds for available commands.", 5)

-- Set Walk Speed
local function setWalkSpeed(speed)
    local newSpeed = tonumber(speed)
    if newSpeed and newSpeed > 0 then
        humanoid.WalkSpeed = newSpeed
        notify("Speed Changed", "Walk speed set to " .. newSpeed, 3)
    else
        notify("Error", "Invalid speed. Example: ;ws 30", 3)
    end
end

-- Set Jump Power
local function setJumpPower(power)
    local newPower = tonumber(power)
    if newPower and newPower > 0 then
        humanoid.JumpPower = newPower
        notify("Jump Power Changed", "Jump power set to " .. newPower, 3)
    else
        notify("Error", "Invalid jump power. Example: ;jp 50", 3)
    end
end

-- Toggle Noclip
local function toggleNoclip()
    noclipEnabled = not noclipEnabled

    if noclipEnabled then
        RunService.Stepped:Connect(function()
            if noclipEnabled and character and humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end
        end)
        notify("Noclip Enabled", "You can now walk through walls.", 3)
    else
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
        notify("Noclip Disabled", "Noclip mode is now off.", 3)
    end
end

-- Server Hop
local function serverHop()
    local serversUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
    local function fetchServers(cursor)
        local url = serversUrl .. (cursor and "&cursor=" .. cursor or "")
        local response = HttpService:JSONDecode(game:HttpGet(url))
        return response
    end

    local server, cursor
    repeat
        local servers = fetchServers(cursor)
        for _, srv in ipairs(servers.data) do
            if srv.playing < srv.maxPlayers and srv.id ~= game.JobId then
                server = srv
                break
            end
        end
        cursor = servers.nextPageCursor
    until server or not cursor

    if server then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, player)
    else
        notify("Server Hop", "No suitable servers found.", 3)
    end
end

-- Join Small Server
local function joinSmallServer()
    local serversUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
    local function fetchServers(cursor)
        local url = serversUrl .. (cursor and "&cursor=" .. cursor or "")
        local response = HttpService:JSONDecode(game:HttpGet(url))
        return response
    end

    local smallestServer, cursor
    repeat
        local servers = fetchServers(cursor)
        for _, srv in ipairs(servers.data) do
            if srv.playing > 0 and srv.id ~= game.JobId then
                smallestServer = srv
                break
            end
        end
        cursor = servers.nextPageCursor
    until smallestServer or not cursor

    if smallestServer then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, smallestServer.id, player)
    else
        notify("Small Server", "No suitable small server found.", 3)
    end
end

-- Show Game ID
local function showGameInfo()
    notify("Game Info", "Game ID: " .. tostring(game.PlaceId), 5)
end

-- Get Player ID
local function getPlayerID(username)
    local targetPlayer = Players:FindFirstChild(username)
    if targetPlayer then
        notify("Player ID", "UserID: " .. targetPlayer.UserId, 5)
    else
        notify("Error", "Player not found. Example: ;pi username", 3)
    end
end

-- Teleport to Game
local function teleportToGame(playerID, gameID)
    if playerID and gameID then
        TeleportService:TeleportToPlaceInstance(tonumber(gameID), playerID, player)
        notify("Game Teleporter", "Teleporting to game...", 3)
    else
        notify("Error", "Usage: ;gt playerID gameID", 3)
    end
end

local function flyV3()
loadstring(game:HttpGet("https://raw.githubusercontent.com/guest433/Idkhello/refs/heads/main/Fly%20aka%20bird"))()
           end

-- Chat Command Handler
player.Chatted:Connect(function(message)
    if not message:sub(1, 1) == ";" then return end -- Only process commands starting with ";"
    local args = string.split(message, " ")
    local command = args[1]:lower()

    if command == ";fly" or command == ";fv3" then
        flyV3()
    elseif command == ";noclip" then
        toggleNoclip()

    elseif command == ";ws" or command == ";speed" or command == ";walkspeed" then
        setWalkSpeed(args[2])

    elseif command == ";jp" or command == ";jumppower" then
        setJumpPower(args[2])

    elseif command == ";rejoin" or command == ";rj" then
        TeleportService:Teleport(game.PlaceId)
        notify("Rejoining", "Teleporting to the current game...", 3)

    elseif command == ";serverhop" or command == ";sh" then
        serverHop()

    elseif command == ";smallserver" or command == ";ss" then
        joinSmallServer()

    elseif command == ";gi" or command == ";gameid" then
        showGameInfo()

    elseif command == ";pi" or command == ";playerid" then
        if args[2] then
            getPlayerID(args[2])
        else
            notify("Error", "Please provide a username. Example: ;pi username", 3)
        end

    elseif command == ";gt" or command == ";gameteleporter" then
        teleportToGame(args[2], args[3])

    else
        notify("Unknown Command", "Use ;cmds for a list of available commands.", 3)
    end
end)

-- List Commands
local function listCommands()
    local commands = [[
Available Commands:
;fly, ;fv3 - Placeholder for fly script
;noclip - Toggle noclip mode

;ws, ;speed, ;walkspeed [speed] - Set walk speed
;jp, ;jumppower [power] - Set jump power

;rejoin, ;rj - Rejoin the current game
;serverhop, ;sh - Switch to a new server
;smallserver, ;ss - Join a smaller server

;gi, ;gameid - Display the current game's ID
;pi, ;playerid [username] - Get the UserID of a player
;gt, ;gameteleporter [playerID] [gameID] - Teleport to a specific game

Type the commands in chat starting with ";".
    ]]
    notify("Commands List", "Check the output for full command details.", 5)
    print(commands)
end
